-- unison implementation

ex01.multiplier : Nat -> Nat -> Nat
ex01.multiplier a b = let 
    go: Nat -> Nat -> Nat -> Nat
    go accumulator a b = match (accumulator, a, b) with
        (ac, _, 0) -> ac
        (ac, 0, _) -> ac
        (ac, x, y) -> go
                        <| (if (and y 1) == 1 then (ex00.adder ac x) else ac)
                        <| (shiftLeft x 1)
                        <| (shiftRight y 1)
    go 0 a b


test> ex01.multiplier.test.ex1 = check ((multiplier 0 1) ==  (0 * 1))
test> ex01.multiplier.test.ex2 = check ((multiplier 1 0) ==  (1 * 0))
test> ex01.multiplier.test.ex3 = check ((multiplier 3 1) ==  (3 * 1))
test> ex01.multiplier.test.ex4 = check ((multiplier 2 1) ==  (2 * 1))
test> ex01.multiplier.test.ex5 = check ((multiplier 2 2) ==  (2 * 2))
test> ex01.multiplier.test.ex6 = check ((multiplier 8 2) ==  (8 * 2))

